openapi: 3.0.1
info:
  title: Money-groupr API
  description: |-
    API of money-groupr
  version: 1.0.0
servers:
  - url: /api/v1

paths:

  /auth:
    get: 
      tags:
        - auth
      summary: get authentication config
      operationId: getAuth
      responses:
        200:
          description: authentication config
          content:
            application/json:
              schema:
                type: object
                properties:
                  local:
                    type: object
                    properties:
                      enabled: 
                        type: boolean
                  proxy:
                    type: object
                    properties:
                      enabled:
                        type: boolean

  /auth/local:
    post:
      tags:
        - auth
      summary: get a token from the local provider
      description: get a token by providing username and password to the local authentication provider
      requestBody:
        description: username and password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalAuthenticationRequest"
        required: true
      responses:
        200:
          $ref: '#/components/responses/AuthenticationResponse'

  /auth/proxy:
    post:
      tags: 
        - auth
      summary: get a token from the proxy provider
      description: get a token by sending an empty request to the proxy provider
      responses:
        200:
          $ref: '#/components/responses/AuthenticationResponse'


  /user:
    get:
      tags:
        - user
      summary: get detailed information about the authenticated user
      operationId: getUser
      responses:
        200:
          description: detailed information about the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []

    post:
      tags:
        - user
      summary: create a user
      description: Create a local user. Only allowed when local authentication is enabled.
      operationId: createUser
      requestBody:
        description: detailed information about the user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
        required: true
      responses:
        200:
          description: detailed information about the new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/token:
    post:
      deprecated: true
      tags:
        - user
      summary: use `/auth/local` instead! 
      description: just used for backwards compatibility
      requestBody:
        description: username and password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalAuthenticationRequest"
        required: true
      responses:
        200:
          $ref: '#/components/responses/AuthenticationResponse'

  /group:
    get:
      tags:
        - group
      summary: get all joined groups
      operationId: getGroups
      security:
        - bearerAuth: []
      responses:
        200:
          description: detailed information about all joined groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"

    post:
      tags:
        - group
      summary: create a group
      operationId: createGroup
      requestBody:
        description: detailed information about the group
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreationRequest"
      security:
        - bearerAuth: []
      responses:
        200:
          description: detailed information about the new group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        403:
          description: the user does not have access to the group, but they can join the group
  /group/{groupId}:
    get:
      tags:
        - group
      summary: get detailed information about a group
      operationId: getGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: detailed information about the group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /group/{groupId}/member:
    get:
      tags:
        - group
        - member
      summary: get all members of a group
      operationId: getGroupMembers
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: all members of the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupMember"

    post:
      tags:
        - group
        - member
      summary: create a group member (join a group)
      operationId: createGroupMember
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: the member was created
  /group/{groupId}/transaction:
    get:
      tags:
        - group
        - transaction
      summary: get all transactions of a group
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: detailed information about all transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"

    post:
      tags:
        - group
        - transaction
      summary: create a transaction in a group
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      requestBody:
        description: detailed information about the purchase
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionCreationRequest"
      responses:
        200:
          description: detailed information about the updated group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

  /group/{groupId}/transaction/{transactionId}:
    delete:
      tags:
        - group
        - transaction
      summary: deletes a transaction in a group
      description: deletes a transaction in a group where the authenticated user is the creditor
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/transactionId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: the transaction was deleted successfully
        404:
          description: the transaction was not found

  /group/{groupId}/debt:
    get:
      tags:
        - group
        - debt
      summary: get all debts of the current user in a group
      parameters:
        - $ref: "#/components/parameters/groupId"
      security:
        - bearerAuth: []
      responses:
        200:
          description: detailed information about the debt of the current user in the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Debt"

components:
  schemas:
    LocalAuthenticationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]

    User:
      type: object
      properties:
        id:
          type: string
          format: userId
          example: f87165e305b0f7c4824d3806434f9d0909610a25641ab8773cf92a48c9d77670
        username:
          type: string
        nickname:
          type: string

    UserCreationRequest:
      type: object
      properties:
        username:
          type: string
        nickname:
          type: string
        password:
          type: string
      required: [username, nickname, password]

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Some Group

        members:
          type: array
          items:
            $ref: "#/components/schemas/GroupMember"

    GroupCreationRequest:
      type: object
      properties:
        name:
          type: string

    GroupMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
        is_owner:
          type: boolean

    Debt:
      type: object
      properties:
        debtor_id:
          type: string
          format: uuid
        amount:
          type: number
          format: unsigned
        was_split_unequally:
          type: boolean

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        group_id:
          type: string
          format: uuid
        creditor_id:
          type: string
          format: uuid
        timestamp:
          type: number
        description:
          type: string
        debts:
          type: array
          items:
            $ref: "#/components/schemas/Debt"

    TransactionCreationRequest:
      type: object
      properties:
        amount:
          type: number
          format: unsigned long
          description: the amount of money purchased
          example: 20
        debtor_ids:
          type: array
          items:
            type: string
            format: uuid
          description: ids of the users who use the purchased good
        description:
          type: string
          example: "Bread"

  responses:
    AuthenticationResponse:
      description: the token
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                format: jwt

  parameters:
    groupId:
      in: path
      name: groupId
      schema:
        type: string
        format: uuid
      required: true
      description: id of the group

    transactionId:
      in: path
      name: transactionId
      schema:
        type: string
        format: uuid
      required: true
      description: id of the transaction

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
